{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\diamo\\\\ZeckoV2\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\n\n// Create the context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(null);\n\n// Create the provider component\nconst AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // Check if user is already logged in on mount\n  useEffect(() => {\n    const checkAuthStatus = async () => {\n      const token = localStorage.getItem('token');\n      if (token) {\n        try {\n          const response = await fetch('http://localhost:5000/api/auth/verify', {\n            headers: {\n              'Authorization': `Bearer ${token}`\n            }\n          });\n          if (response.ok) {\n            const userData = await response.json();\n            setUser(userData);\n          } else {\n            localStorage.removeItem('token');\n          }\n        } catch (error) {\n          console.error('Auth verification error:', error);\n          localStorage.removeItem('token');\n        }\n      }\n      setLoading(false);\n    };\n    checkAuthStatus();\n  }, []);\n  const login = async (email, password) => {\n    try {\n      const response = await fetch('http://localhost:5000/api/auth/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email,\n          password\n        })\n      });\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Login failed');\n      }\n      const data = await response.json();\n      localStorage.setItem('token', data.token);\n      setUser(data.user);\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error('Login error:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem('token');\n    setUser(null);\n  };\n  const register = async userData => {\n    try {\n      const response = await fetch('http://localhost:5000/api/auth/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(userData)\n      });\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Registration failed');\n      }\n      const data = await response.json();\n      localStorage.setItem('token', data.token);\n      setUser(data.user);\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error('Registration error:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  };\n  const value = {\n    user,\n    login,\n    logout,\n    register,\n    loading\n  };\n\n  // Show loading state while checking authentication\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 12\n    }, this); // You might want to replace this with a proper loading component\n  }\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 5\n  }, this);\n};\n\n// Create the hook\n_s(AuthProvider, \"NiO5z6JIqzX62LS5UWDgIqbZYyY=\");\n_c = AuthProvider;\nconst useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\n// Export everything\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport { AuthProvider, useAuth };\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","loading","setLoading","checkAuthStatus","token","localStorage","getItem","response","fetch","headers","ok","userData","json","removeItem","error","console","login","email","password","method","body","JSON","stringify","Error","message","data","setItem","success","logout","register","value","fileName","_jsxFileName","lineNumber","columnNumber","Provider","_c","useAuth","_s2","context","$RefreshReg$"],"sources":["C:/Users/diamo/ZeckoV2/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\n\r\n// Create the context\r\nconst AuthContext = createContext(null);\r\n\r\n// Create the provider component\r\nconst AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  // Check if user is already logged in on mount\r\n  useEffect(() => {\r\n    const checkAuthStatus = async () => {\r\n      const token = localStorage.getItem('token');\r\n      if (token) {\r\n        try {\r\n          const response = await fetch('http://localhost:5000/api/auth/verify', {\r\n            headers: {\r\n              'Authorization': `Bearer ${token}`\r\n            }\r\n          });\r\n          \r\n          if (response.ok) {\r\n            const userData = await response.json();\r\n            setUser(userData);\r\n          } else {\r\n            localStorage.removeItem('token');\r\n          }\r\n        } catch (error) {\r\n          console.error('Auth verification error:', error);\r\n          localStorage.removeItem('token');\r\n        }\r\n      }\r\n      setLoading(false);\r\n    };\r\n\r\n    checkAuthStatus();\r\n  }, []);\r\n\r\n  const login = async (email, password) => {\r\n    try {\r\n      const response = await fetch('http://localhost:5000/api/auth/login', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({ email, password })\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const error = await response.json();\r\n        throw new Error(error.message || 'Login failed');\r\n      }\r\n\r\n      const data = await response.json();\r\n      localStorage.setItem('token', data.token);\r\n      setUser(data.user);\r\n      return { success: true };\r\n    } catch (error) {\r\n      console.error('Login error:', error);\r\n      return { success: false, error: error.message };\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    localStorage.removeItem('token');\r\n    setUser(null);\r\n  };\r\n\r\n  const register = async (userData) => {\r\n    try {\r\n      const response = await fetch('http://localhost:5000/api/auth/register', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(userData)\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const error = await response.json();\r\n        throw new Error(error.message || 'Registration failed');\r\n      }\r\n\r\n      const data = await response.json();\r\n      localStorage.setItem('token', data.token);\r\n      setUser(data.user);\r\n      return { success: true };\r\n    } catch (error) {\r\n      console.error('Registration error:', error);\r\n      return { success: false, error: error.message };\r\n    }\r\n  };\r\n\r\n  const value = {\r\n    user,\r\n    login,\r\n    logout,\r\n    register,\r\n    loading\r\n  };\r\n\r\n  // Show loading state while checking authentication\r\n  if (loading) {\r\n    return <div>Loading...</div>; // You might want to replace this with a proper loading component\r\n  }\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\n// Create the hook\r\nconst useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\n// Export everything\r\nexport { AuthProvider, useAuth };\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}