{"version":3,"file":"static/js/30.f414dcbf.chunk.js","mappings":"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","sources":["pages/UserActivityLog.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport styled from 'styled-components';\r\nimport { useAuth } from '../context/AuthContext';\r\nimport { activityLogService } from '../services/activityLogService';\r\nimport { \r\n  subscribeToActivityUpdates, \r\n  unsubscribeFromActivityUpdates,\r\n  getSocket \r\n} from '../utils/socket.io';\r\nimport { testActivityUpdate } from '../utils/testActivityLog';\r\n\r\nconst ActivityLogContainer = styled.div`\r\n  max-width: 800px;\r\n  margin: 0 auto;\r\n  padding: 20px;\r\n`;\r\n\r\nconst Header = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 20px;\r\n`;\r\n\r\nconst FilterSection = styled.div`\r\n  background: white;\r\n  padding: 15px;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 4px rgba(0,0,0,0.1);\r\n  margin-bottom: 20px;\r\n  display: flex;\r\n  gap: 15px;\r\n`;\r\n\r\nconst Select = styled.select`\r\n  padding: 8px;\r\n  border-radius: 4px;\r\n  border: 1px solid #ddd;\r\n  min-width: 150px;\r\n`;\r\n\r\nconst ActivityItem = styled.div`\r\n  background: white;\r\n  padding: 15px;\r\n  margin-bottom: 10px;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 4px rgba(0,0,0,0.1);\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n`;\r\n\r\nconst ActivityInfo = styled.div`\r\n  flex: 1;\r\n`;\r\n\r\nconst ActivityType = styled.span`\r\n  background-color: ${props => {\r\n    switch (props.type) {\r\n      case 'login': return '#e3f2fd';\r\n      case 'security': return '#fff3e0';\r\n      case 'profile': return '#e8f5e9';\r\n      case 'order': return '#f3e5f5';\r\n      default: return '#f5f5f5';\r\n    }\r\n  }};\r\n  color: ${props => {\r\n    switch (props.type) {\r\n      case 'login': return '#1976d2';\r\n      case 'security': return '#f57c00';\r\n      case 'profile': return '#388e3c';\r\n      case 'order': return '#7b1fa2';\r\n      default: return '#616161';\r\n    }\r\n  }};\r\n  padding: 4px 8px;\r\n  border-radius: 4px;\r\n  font-size: 0.85rem;\r\n  margin-right: 10px;\r\n`;\r\n\r\nconst Timestamp = styled.time`\r\n  color: #666;\r\n  font-size: 0.9rem;\r\n`;\r\n\r\nconst NoActivities = styled.div`\r\n  text-align: center;\r\n  padding: 40px;\r\n  background: white;\r\n  border-radius: 8px;\r\n  color: #666;\r\n`;\r\n\r\nconst StatusIndicator = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n  font-size: 0.9rem;\r\n`;\r\n\r\nconst StatusDot = styled.span`\r\n  width: 8px;\r\n  height: 8px;\r\n  border-radius: 50%;\r\n  background-color: ${props => props.connected ? '#4caf50' : '#f44336'};\r\n`;\r\n\r\nconst UpdateIndicator = styled.div`\r\n  position: fixed;\r\n  bottom: 20px;\r\n  right: 20px;\r\n  background-color: #2196f3;\r\n  color: white;\r\n  padding: 10px 20px;\r\n  border-radius: 4px;\r\n  box-shadow: 0 2px 4px rgba(0,0,0,0.2);\r\n  animation: fadeIn 0.3s ease-in;\r\n  \r\n  @keyframes fadeIn {\r\n    from { opacity: 0; transform: translateY(10px); }\r\n    to { opacity: 1; transform: translateY(0); }\r\n  }\r\n`;\r\n\r\nconst TestButton = styled.button`\r\n  background-color: #ff9800;\r\n  color: white;\r\n  border: none;\r\n  padding: 8px 16px;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  font-size: 0.9rem;\r\n  margin-left: 10px;\r\n\r\n  &:hover {\r\n    background-color: #f57c00;\r\n  }\r\n`;\r\n\r\nfunction UserActivityLog() {\r\n  const { user } = useAuth();\r\n  const [activities, setActivities] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [socketConnected, setSocketConnected] = useState(false);\r\n  const [realtimeUpdate, setRealtimeUpdate] = useState(false);\r\n  const [filters, setFilters] = useState({\r\n    type: 'all',\r\n    dateRange: 'week'\r\n  });\r\n\r\n  useEffect(() => {\r\n    fetchActivityLog();\r\n\r\n    // Check initial socket connection\r\n    const socket = getSocket();\r\n    setSocketConnected(socket?.connected || false);\r\n\r\n    // Handle socket connection status\r\n    const handleConnect = () => setSocketConnected(true);\r\n    const handleDisconnect = () => setSocketConnected(false);\r\n    const handleError = (error) => {\r\n      console.error('Socket error:', error);\r\n      setError('Real-time updates unavailable');\r\n    };\r\n\r\n    socket?.on('connect', handleConnect);\r\n    socket?.on('disconnect', handleDisconnect);\r\n    socket?.on('error', handleError);\r\n\r\n    // Handle real-time activity updates\r\n    const handleActivityUpdate = (newActivity) => {\r\n      setActivities(prevActivities => {\r\n        const updatedActivities = [newActivity, ...prevActivities];\r\n        return updatedActivities.sort((a, b) => \r\n          new Date(b.timestamp) - new Date(a.timestamp)\r\n        );\r\n      });\r\n      \r\n      // Show update indicator\r\n      setRealtimeUpdate(true);\r\n      setTimeout(() => setRealtimeUpdate(false), 3000);\r\n    };\r\n\r\n    subscribeToActivityUpdates(handleActivityUpdate);\r\n\r\n    // Cleanup\r\n    return () => {\r\n      unsubscribeFromActivityUpdates(handleActivityUpdate);\r\n      socket?.off('connect', handleConnect);\r\n      socket?.off('disconnect', handleDisconnect);\r\n      socket?.off('error', handleError);\r\n    };\r\n  }, [filters]);\r\n\r\n  const fetchActivityLog = async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      const data = await activityLogService.getActivityLog(filters);\r\n      setActivities(data);\r\n    } catch (err) {\r\n      setError(err.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Add retry connection function\r\n  const handleRetryConnection = () => {\r\n    const socket = getSocket();\r\n    if (socket) {\r\n      socket.connect();\r\n    }\r\n  };\r\n\r\n  // Add test function\r\n  const handleTestUpdate = () => {\r\n    testActivityUpdate();\r\n  };\r\n\r\n  return (\r\n    <ActivityLogContainer>\r\n      <Header>\r\n        <h1>Activity Log</h1>\r\n        <div style={{ display: 'flex', alignItems: 'center' }}>\r\n          <StatusIndicator>\r\n            <StatusDot connected={socketConnected} />\r\n            {socketConnected ? 'Real-time updates enabled' : (\r\n              <>\r\n                Real-time updates disabled\r\n                <button onClick={handleRetryConnection}>Retry</button>\r\n              </>\r\n            )}\r\n          </StatusIndicator>\r\n          \r\n          {/* Add test button only in development */}\r\n          {process.env.NODE_ENV === 'development' && (\r\n            <TestButton onClick={handleTestUpdate}>\r\n              Test Updates\r\n            </TestButton>\r\n          )}\r\n        </div>\r\n      </Header>\r\n      \r\n      <FilterSection>\r\n        <Select\r\n          name=\"type\"\r\n          value={filters.type}\r\n          onChange={handleFilterChange}\r\n        >\r\n          <option value=\"all\">All Activities</option>\r\n          <option value=\"login\">Login Activities</option>\r\n          <option value=\"security\">Security Changes</option>\r\n          <option value=\"profile\">Profile Updates</option>\r\n          <option value=\"order\">Order Activities</option>\r\n        </Select>\r\n\r\n        <Select\r\n          name=\"dateRange\"\r\n          value={filters.dateRange}\r\n          onChange={handleFilterChange}\r\n        >\r\n          <option value=\"today\">Today</option>\r\n          <option value=\"week\">This Week</option>\r\n          <option value=\"month\">This Month</option>\r\n          <option value=\"year\">This Year</option>\r\n        </Select>\r\n      </FilterSection>\r\n\r\n      {loading ? (\r\n        <div>Loading activities...</div>\r\n      ) : error ? (\r\n        <div>\r\n          Error: {error}\r\n          <button onClick={fetchActivityLog}>Retry</button>\r\n        </div>\r\n      ) : activities.length === 0 ? (\r\n        <NoActivities>No activities found for the selected filters.</NoActivities>\r\n      ) : (\r\n        <>\r\n          {activities.map(activity => (\r\n            <ActivityItem key={activity.id}>\r\n              <ActivityInfo>\r\n                <ActivityType type={activity.type}>\r\n                  {activity.type.charAt(0).toUpperCase() + activity.type.slice(1)}\r\n                </ActivityType>\r\n                <span>{activity.description}</span>\r\n              </ActivityInfo>\r\n              <Timestamp>{new Date(activity.timestamp).toLocaleString()}</Timestamp>\r\n            </ActivityItem>\r\n          ))}\r\n          \r\n          {realtimeUpdate && (\r\n            <UpdateIndicator>\r\n              New activity received!\r\n            </UpdateIndicator>\r\n          )}\r\n        </>\r\n      )}\r\n    </ActivityLogContainer>\r\n  );\r\n}\r\n\r\nexport default UserActivityLog; "],"names":["ActivityLogContainer","styled","div","Header","FilterSection","Select","select","ActivityItem","ActivityInfo","ActivityType","span","props","type","Timestamp","time","NoActivities","StatusIndicator","StatusDot","connected","UpdateIndicator","button","user","useAuth","activities","setActivities","useState","loading","setLoading","error","setError","socketConnected","setSocketConnected","realtimeUpdate","setRealtimeUpdate","filters","setFilters","dateRange","useEffect","fetchActivityLog","socket","getSocket","handleConnect","handleDisconnect","handleError","console","on","handleActivityUpdate","newActivity","prevActivities","sort","a","b","Date","timestamp","setTimeout","subscribeToActivityUpdates","unsubscribeFromActivityUpdates","off","async","data","activityLogService","getActivityLog","err","message","_jsxs","children","_jsx","style","display","alignItems","_Fragment","onClick","handleRetryConnection","connect","process","name","value","onChange","handleFilterChange","length","map","activity","charAt","toUpperCase","slice","description","toLocaleString","id"],"sourceRoot":""}